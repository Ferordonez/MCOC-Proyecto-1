import scipy.interpolate as interpol
from numpy.linalg import inv
import numpy as np 
import scipy as sp 
from scipy.integrate import solve_ivp
from numpy import *
from matplotlib import pyplot as plt
import os

def interpolar(t,origen): 
    file=open(origen,"r") 
    listaa=file.readlines() 
    tasa_muestreo=float(listaa[1][-19:-14])
    nmuestras=int(listaa[2][28:])
    DT=nmuestras/tasa_muestreo
    datos = sp.loadtxt(origen)
    t=sp.arange(0,nmuestras*DT,DT)
    a = interpol.interp1d(t,datos,kind="cubic")
    return [a,DT,t]
     
def fun(t,z):
    if t > fun.tnextreport:
        print ("  {} at t = {}".format(fun.solver, fun.tnextreport))
        fun.tnextreport += 1
    Fr = sp.zeros(40)
    Ft=np.zeros(40)
    a= interpolar(t,origen)  #insertar ruta del sismo a analizar
    Ft[20:] = a[0](t)
    Fr[19] = -(Cap[0]*sp.tanh(z[20]/vr)*M_I[0,0])
    for i in range(20): 
        Fr[i+20] = -(Cap[i]*M_I[i,i]*sp.tanh((z[i+20]-z[i+19])/vr))
    return sp.array(sp.matmul(A,z)+Fr+Ft).reshape(-1)
###################Valores disipadores################################
Cap =[ 300, 600, 0,150, 150, 300, 300, 300, 500, 800, 500, 500, 300, 300, 0, 0, 0, 0, 0, 0]
a = np.sum(Cap)
print (a)
b = len(Cap)
###################Datos edificio###################################
largo = [12.*3.5, 12.*3.5, 12.*3.5, 12.*3.5, 8.*3.5, 8.*3.5, 8.*3.5, 8.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5, 4.*3.5] 
masa = np.zeros(20)
l = 0
while l < len(largo):
    masa[l] = 6.2*largo[l]
    l += 1 
Alturas=[]
for i in range(20):
    Alturas.append(4.+2.8*i)
print (Alturas)
M = sp.transpose(masa)*sp.identity(20)  
M = np.array(M)
M *= 1000 
e = 23.5*1000 #GPa
col = np.array([e*(600**4), e*(700**4), e*(800**4), e*(900**4), e*(1000**4)])  #12EI

piso1 = np.array([6, 2, 0, 1, 4])
piso2 = np.array([4, 0, 1, 0, 4]) 
piso3 = np.array([0, 0, 1, 4, 0]) 
piso4 = np.array([0, 1, 4, 0, 0])
piso5 = np.array([5, 0, 0, 0, 0])
################# Matriz K rigidez ########################################3
k=[]
for i in range(4):
    k.append(sp.sum(col*piso1))
for i in range(4):
    k.append(sp.sum(col*piso2))
for i in range(4): 
    k.append(sp.sum(col*piso3))
for i in range(4): 
    k.append(sp.sum(col*piso4)) 
for i in range(4): 
    k.append(sp.sum(col*piso5))
k = np.array(k)
k[0] /= 4000**3    
k[1:] /= 2800**3
k_total = np.zeros((20,20)) 
for i in range(19): 
    k_total[i][i] = k[i] + k[i+1] 
    k_total[i][i+1] = -k[i+1] 
    k_total[i+1][i] = -k[i+1]
k_total[19][19] = k[19]
k_total = np.matrix(k_total)
################## Datos para las Iteraciones##############
wn = sp.sqrt(k/masa) 
fn = wn/2/sp.pi
Tn= 1/fn 
dt = 0.05
tmax = 100
vr = 0.0001
d0 = 10.
v0 = 0.
t = sp.arange(0, tmax, dt)
Nt = len(t)
Id = np.matrix(sp.identity(20))
zero = np.matrix(np.zeros((20,20)))
M_I = inv(M)
################# Matriz C##############################
c = np.zeros((20,20)) 
f1 = 0.2
f2 = 2. 
x1 = 0.025
a0 = (4*sp.pi*f1*f2*x1)*(f1-f2)/(f1**2-f2**2)
a1 = x1*(f1-f2)/(sp.pi*(f1**2-f2**2))
c = a0*M + a1*k_total  
c = np.matrix(c)
################ Matriz A###############################
A =  np.block([[zero,Id],[-M_I*k_total, -M_I*c]])


z0 = np.array(sp.zeros(40)) 
################## Metodo Euler ##################################33
z_euler = sp.zeros((40,Nt+1),dtype=sp.float64)
z_euler[:,0] = z0
if False:
    print ('Integrando con Euler')
    fun.tnextreport = 0
    fun.solver = 'Euler'
    i = 1
    ti = dt 
    while (ti < tmax): 
        z_euler[:,i] = dt*fun(ti, z_euler[:,i-1]) + z_euler[:,i-1]
        ti += dt 
        i += 1
 
####################### Metodo Runge-Kutta ################################3
z_RK45 = sp.zeros((40,Nt+1),dtype=sp.float64)
z_RK45[:,0] = z0
if True:
    print ('Integrando con RK45') 
    fun.tnextreport = 0
    fun.solver = 'RK45'
    solucion_rk45 = solve_ivp(fun, [0., tmax], z0, method = fun.solver, t_eval=t,vectorized=False ) 
    z_RK45[:,1:] = solucion_rk45.y
    print(z_RK45[:,1:])



diferencias=[]
for i in range(20):
    aa=sp.amax(abs(z_RK45[i,:]))
    aaa=sp.amax(abs(z_RK45[i*2,:]))
    if aa < aaa:
        aa=aaa
        
    bb=aa/Alturas[i]
    
    print (bb)
    diferencias.append(bb)
maximo= max(diferencias)
rk=[]
for i in range(20):
    aa=sp.amax(abs(z_RK45[i,:]))
    aaa=sp.amax(abs(z_RK45[i*2,:]))
    if aa < aaa:
        aa=aaa
    aa=aa/Alturas[i]
    rk.append(aa)
maximork=max(rk)
eu=[]
for i in range(20):
    aa=sp.amax(abs(z_euler[i,:]))
    aaa=sp.amax(abs(z_euler[i,:]))
    if aa < aaa:
        aa=aaa
    aa=aa/Alturas[i]
    eu.append(aa)
maximoeu=max(eu)
pisork=sp.argmax(rk)+1
pisork2=sp.argmin(rk)+1
pisoeu=sp.argmax(eu)+1
pisoeu2=sp.argmin(eu)+1
print("Rk:",maximork)
print("piso:",pisork,"   ",pisork2)
print("Eu:",maximoeu,)
print("piso:",pisoeu,"   ",pisoeu2)
plt.figure()
for z, lab in zip([z_euler, z_RK45], ["Euler", "RK45"]):
    u = z[19,:]
    v = z[39,:]
    #Extraer desplazamientos y velocidades
    u = z[19,:-1]
    v = z[39,:-1]
    
    dmax=max(abs(u))
    plt.subplot(3,1,1)
    plt.plot(t, u, label=lab)
    #plt.ylim([-1.5*d0, 1.5*d0])
    plt.xlim([0, tmax])
    plt.ylabel("Despazamiento, $u = z_1$ (m)")
    plt.grid(True)
    
    vmax = max(abs(v))
    plt.subplot(3,1,2)
    plt.plot(t, v)
    plt.ylabel("Velocidad, $\dot{u} = z_2$ (m/s)")
    plt.xlabel("Tiempo, $t$ (s)")
    plt.ylim([-1.5*vmax, 1.5*vmax])
    plt.xlim([0, tmax])
    plt.grid(True) 
plt.subplot(3,1,1)
plt.legend()
plt.suptitle("Solucion por metodo de Euler")
plt.show()
np.savez('MatrixM.npz',M)
np.savez('MatrixK.npz',k_total)
np.savez('MatrixC.npz', c)
